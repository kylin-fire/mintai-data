<?xml version="1.0" encoding="GBK"?>
<!-- ====================== -->
<!-- Logback Configuration. -->
<!-- ====================== -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="60 seconds" debug="false">
    <!-- ====================== -->
    <!-- 属性定义 -->
    <!-- ====================== -->
    <property name="APP_NAME" value="default"/>
    <property name="LOGGING_LEVEL" value="info"/>
    <property name="LOGGING_ROOT" value="${catalina.home:-.}/logs/"/>

    <!-- ====================== -->
    <!-- 上下文，默认default -->
    <!-- ====================== -->
    <contextName>${APP_NAME}</contextName>

    <!-- ====================== -->
    <!-- appender -->
    <!-- ====================== -->
    <!--appender：有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- target： ConsoleAppender特有，字符串 System.out 或者 System.err ，默认 System.out -->
        <target>System.out</target>
        <!-- 过滤掉 TRACE 和 DEBUG 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] %-5p %c{0} # %m%n</pattern>
        </encoder>
    </appender>

    <!--&lt;!&ndash; appender：有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。 &ndash;&gt;-->
    <appender name="STDERR" class="ch.qos.logback.core.ConsoleAppender">
        <!-- target： ConsoleAppender特有，字符串 System.out 或者 System.err ，默认 System.out -->
        <target>System.err</target>
        <!-- 过滤掉 TRACE 和 DEBUG 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] %-5p %c{0} # %m%n</pattern>
        </encoder>
    </appender>

    <!-- RollingFileAppender: 把日志添加到文件；还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用 -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- append:如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。 -->
        <append>true</append>
        <!-- 过滤掉其他级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] %-5p %c{0} # %m%n</pattern>
        </encoder>
        <!-- rollingPolicy: 当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- fileNamePattern:必要节点，包含文件名及“%d”转换符， “%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM-dd} -->
            <fileNamePattern>${LOGGING_ROOT}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- maxHistory:可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>

        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!-- rollover daily -->
            <!--<fileNamePattern>mylog-%d{yyyy-MM-dd}.%i.txt</fileNamePattern>-->
            <!--<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
                <!-- or whenever the file size reaches 100MB -->
                <!--<maxFileSize>100MB</maxFileSize>-->
            <!--</timeBasedFileNamingAndTriggeringPolicy>-->
        <!--</rollingPolicy>-->

        <!-- 超过指定大小，触发滚动 -->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<maxFileSize>200MB</maxFileSize>-->
        <!--</triggeringPolicy>-->
    </appender>

    <appender name="APP" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] %-5p %c{0} # %m%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_ROOT}/app.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="SQL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>[%d{yyyy-MM-dd HH:mm:ss}] %-5p %c{0} # %m%n</pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOGGING_ROOT}/sql.%d{yyyy-MM-dd}.log</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!-- ====================== -->
    <!-- logger -->
    <!-- ====================== -->
    <!-- name:用来指定受此loger约束的某一个包或者具体的某一个类。 -->
    <!-- level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
        如果未设置此属性，那么当前loger将会继承上级的级别。 -->
    <!-- addtivity: 是否向上级loger传递打印信息。默认是true。 -->
    <!-- appender-ref: 零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。 -->
    <logger name="java.sql" additivity="false" level="${LOGGING_LEVEL}">
        <appender-ref ref="SQL"/>
        <appender-ref ref="ERROR"/>
    </logger>
    <logger name="com.ibatis" additivity="false" level="${LOGGING_LEVEL}">
        <appender-ref ref="SQL"/>
        <appender-ref ref="ERROR"/>
    </logger>

    <!-- 默认的日志配置 -->
    <root>
        <level value="${LOGGING_LEVEL}"/>
        <appender-ref ref="APP"/>
        <appender-ref ref="ERROR"/>
    </root>
</configuration>
